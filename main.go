package main

import (
	"bufio"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"
	"unicode"
)

func main() {
	var NameList = []string{}
	data,err := ioutil.ReadFile("./proto/hamster.proto")
	if err == nil {
		sr := strings.NewReader(string(data))
		reader := bufio.NewReader(sr)
		for {
			line,_,err := reader.ReadLine()
			if err == io.EOF {
				break
			}
			//fmt.Println(string(line),ispre)
			strLine := string(line)
			if strings.HasPrefix(strLine,"message"){
				splitStr := strings.Trim(strLine,"message ")
				protoName := strings.TrimRight(splitStr," {}")
				NameList = append(NameList,protoName)
			}
		}
	}
	//必须存在request
	//取掉request去找response
	var name string
	for _, s := range (NameList){
		ret:= Parse(s)
		format := fmt.Sprintf(templateLine,ret,s)
		name = name + format + "\n"
	}
	fmt.Println(name)
	outStr := fmt.Sprintf(template,name)
	dstFile,err :=os.Create("./ServiceApiMap.lua")
	dstFile.WriteString(outStr)
	dstFile.Close()
	fmt.Println("Parse Successful !")
}

var templateLine string = `    %s = "%s",`

var template string = `--Generated By go-parse-proto Do not Edit
local config = {
%s
}
return config`

func Parse(str string) string {
	forM := []rune(str)
	ret := []rune{}

	for i := 0; i < (len(forM) - 1); i++ {
		if i!=0 && unicode.IsUpper(forM[i]) && unicode.IsLower(forM[i + 1]) {
			ret = append(ret,rune('_'))
		}

		ret = append(ret,unicode.ToUpper(forM[i]))
	}
	ret = append(ret,unicode.ToUpper(forM[len(forM) - 1]))
	return string(ret)
}
